// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/TheTeaParty/notnotes-platform/internal/config"
	"github.com/TheTeaParty/notnotes-platform/internal/domain/note"
	"github.com/TheTeaParty/notnotes-platform/internal/domain/tag"
	"github.com/TheTeaParty/notnotes-platform/internal/handler/rest"
	"github.com/TheTeaParty/notnotes-platform/internal/pkg/logger"
	"github.com/TheTeaParty/notnotes-platform/internal/pkg/nats"
	"github.com/TheTeaParty/notnotes-platform/internal/pkg/pg"
	"github.com/TheTeaParty/notnotes-platform/internal/service/coordinator"
	"github.com/TheTeaParty/notnotes-platform/internal/service/notes"
	"github.com/TheTeaParty/notnotes-platform/internal/service/tags"
)

// Injectors from wire.go:

func InitializeApplication() (*Application, error) {
	configConfig := config.New()
	db, err := pg.New(configConfig)
	if err != nil {
		return nil, err
	}
	noteRepository := note.NewGorm(db)
	tagRepository := tag.NewGorm(db)
	zapLogger, err := logger.New()
	if err != nil {
		return nil, err
	}
	conn, err := nats.New(configConfig)
	if err != nil {
		return nil, err
	}
	serviceCoordinator := coordinator.NewNATS(zapLogger, configConfig, conn)
	serviceNotes := notes.NewSrv(noteRepository, tagRepository, zapLogger, serviceCoordinator)
	serviceTags := tags.NewSrv(tagRepository, zapLogger)
	serverInterface := rest.NewRESTV1Handler(serviceNotes, serviceTags)
	application, err := NewApplication(serverInterface, configConfig, zapLogger)
	if err != nil {
		return nil, err
	}
	return application, nil
}
