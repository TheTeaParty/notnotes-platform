// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// CreateOrUpdateNote defines model for CreateOrUpdateNote.
type CreateOrUpdateNote struct {
	Content string `json:"content"`
	Name    string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Data    map[string]interface{} `json:"data"`
	Message string                 `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Data interface{} `json:"data"`
	Type string      `json:"type"`
}

// Note defines model for Note.
type Note struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Tag defines model for Tag.
type Tag struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
}

// BadRequest defines model for BadRequest.
type BadRequest Error

// NotFound defines model for NotFound.
type NotFound Error

// ServerError defines model for ServerError.
type ServerError Error

// GetNotesParams defines parameters for GetNotes.
type GetNotesParams struct {
	Tags *[]string `json:"tags,omitempty"`
	Name *string   `json:"name,omitempty"`
}

// CreateNoteJSONBody defines parameters for CreateNote.
type CreateNoteJSONBody CreateOrUpdateNote

// UpdateNoteJSONBody defines parameters for UpdateNote.
type UpdateNoteJSONBody CreateOrUpdateNote

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	Name *string `json:"name,omitempty"`
}

// CreateNoteJSONRequestBody defines body for CreateNote for application/json ContentType.
type CreateNoteJSONRequestBody CreateNoteJSONBody

// UpdateNoteJSONRequestBody defines body for UpdateNote for application/json ContentType.
type UpdateNoteJSONRequestBody UpdateNoteJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Events
	// (GET /events)
	GetEvents(w http.ResponseWriter, r *http.Request)
	// Get Nots
	// (GET /notes)
	GetNotes(w http.ResponseWriter, r *http.Request, params GetNotesParams)
	// Create Note
	// (POST /notes)
	CreateNote(w http.ResponseWriter, r *http.Request)
	// Delete Note
	// (DELETE /notes/{noteID})
	DeleteNote(w http.ResponseWriter, r *http.Request, noteID string)
	// Get Note
	// (GET /notes/{noteID})
	GetNote(w http.ResponseWriter, r *http.Request, noteID string)
	// Update Note
	// (PUT /notes/{noteID})
	UpdateNote(w http.ResponseWriter, r *http.Request, noteID string)
	// Get Tags
	// (GET /tags)
	GetTags(w http.ResponseWriter, r *http.Request, params GetTagsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvents(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetNotes operation middleware
func (siw *ServerInterfaceWrapper) GetNotes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotesParams

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotes(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateNote operation middleware
func (siw *ServerInterfaceWrapper) CreateNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNote(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteNote operation middleware
func (siw *ServerInterfaceWrapper) DeleteNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "noteID" -------------
	var noteID string

	err = runtime.BindStyledParameter("simple", false, "noteID", chi.URLParam(r, "noteID"), &noteID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNote(w, r, noteID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetNote operation middleware
func (siw *ServerInterfaceWrapper) GetNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "noteID" -------------
	var noteID string

	err = runtime.BindStyledParameter("simple", false, "noteID", chi.URLParam(r, "noteID"), &noteID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNote(w, r, noteID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateNote operation middleware
func (siw *ServerInterfaceWrapper) UpdateNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "noteID" -------------
	var noteID string

	err = runtime.BindStyledParameter("simple", false, "noteID", chi.URLParam(r, "noteID"), &noteID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNote(w, r, noteID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "name" -------------
	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events", wrapper.GetEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/notes", wrapper.GetNotes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notes", wrapper.CreateNote)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/notes/{noteID}", wrapper.DeleteNote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/notes/{noteID}", wrapper.GetNote)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/notes/{noteID}", wrapper.UpdateNote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.GetTags)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/bPAz+Kwbf96jF6daTb+3aDcGwpFi7U1EMmsWk6mxJleSsQeD/PkiyEztxnX6k",
	"H6fYEk0+ekg+VJaQylxJgcIaSJag0SgpDPqXY8p+4G2Bxrq3VAqLwj9SpTKeUsuliG+MFG7NpNeYU/f0",
	"v8YpJPBfvHYdh10Tn2otNZRlSYChSTVXzgkkLlZUBysJjKX9IgvBXj7wWNoohCoJnKOeow62Lx45BIvq",
	"fVL589R/1kgtTvRPxajFsbToVpWWCrXlIT0NdHahEBIwVnMxcwcRNMeOjZKAxtuCa2SQXAYrsnJ0RWp7",
	"+fsGU5+IFRft2Ixa2vC/ts/RGDp7QOzakARfnbHn1fG6Y1OxmEwhueyn33NXkn6jCzqD8qqsMezC7hFU",
	"xl3AH5+v1Oeb/aJ+eyp17p5cIPxguc+SRsomIltAYnWBZNsHZ6GDd5jdUxoECl9rz8GwQRNnQDZrrHXU",
	"VswuIl1etnnczdU93DyxTVrnWAffBuw+5GIqfZW2ev3obBQ1ViIuou9U/2Hyrxg4vNxmztE5zVWG0dHZ",
	"CAjMUZvw9cFgOBg6vFKhoIpDAp8Gw8EBEFDUXntWYpzXIj5Dz4zjzAvWiEECX9GeBgvSVvmPw+GjtI5b",
	"zM1O0fOtu2oooFrTRZcITr4F6SvynOpFwBlVQN1GLKTF3lONvYFjQtMcLWrjNQHvVCYZQjKlmUGXF0jg",
	"tkC9qJOZgKUz92XH2bYqZeMcZNnpsCqStcPNwrp6DfIryXsQ925tSovM3ud0BTduDsftnI2lyxgBJU1H",
	"nsI888BCb6Gxx5It9jZlOwZm2e5jp1jlFv0He0OwjtlmOSDz14vDkO1+mhu3rv1kJwCIKnx1S8VL9zM6",
	"KYNYZRhGVjttJ359lbYWc4fbKhfMWVQX4GEw6ge+uurt57QBwwpCn2o8VwmfUg2h596CmKpJPSsbWuml",
	"zE2ShpL54oDNBtqhbaroYLvRku+r918v249u+7cokEBfQyf8eOyZvBdhfHYV07uci/6W/8pj0XPkgxhv",
	"FzgqdAYJXFurTBLHVPEB3vmr3yCVufsn8i8AAP//HP4N1JgPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

